package labPackage;

import lejos.hardware.motor.*;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorMode;
import lejos.robotics.RegulatedMotor;
import lejos.robotics.SampleProvider;

public  class ShooterMilestone {
	private EV3LargeRegulatedMotor lowerArmMotor, higherArmMotor; //lower is arm, higher is claw
	private RegulatedMotor shooter, loaderMotor;
	private Navigation nav;
	private SampleProvider colorValue;
	private EV3ColorSensor colorSensor;
	private float[] colorData = new float[1];
	private double angle;
	
	public ShooterMilestone(EV3LargeRegulatedMotor lowerArmMotor, EV3LargeRegulatedMotor higherArmMotor, RegulatedMotor shooter, RegulatedMotor loaderMotor, Navigation nav , SampleProvider colorValue, float[] colorData, EV3ColorSensor colorSensor, double angle){
		this.lowerArmMotor = lowerArmMotor;
		this.higherArmMotor = higherArmMotor;
		this.shooter = shooter;
		this.loaderMotor = loaderMotor;
		this.nav = nav;
		this.colorValue = colorValue;
		this.colorSensor = colorSensor; 
		this.colorData = colorData;
		this.angle = angle;
	}
	
	public void doShooter(){
		colorSensor.setFloodlight(true);						// setting up the sensor
		SensorMode sensorMode = colorSensor.getRedMode();
		
		while(true){
			sensorMode.fetchSample(colorData, 0);
			
			//if(colorData[0] > 5){
				nav.setSpeeds(0,0);
				shooter.setSpeed(350);
				loaderMotor.setSpeed(50);
				lowerArmMotor.setAcceleration(500);
				lowerArmMotor.setSpeed(35);
				higherArmMotor.setSpeed(60);
				
				
				lowerArmMotor.rotate(-20); //bring upright
				shooter.rotate(-1000, true); //winding up shooter
				higherArmMotor.rotate(150); //opening claw. START W CLAW FULLY CLOSED
				lowerArmMotor.rotate(-120); //lowering arm
				higherArmMotor.rotate(-130); //closing claw grabbing ball
				lowerArmMotor.rotate(140); //bringing up arm
				higherArmMotor.rotate(50); //opening claw
				lowerArmMotor.rotate(-20, true); //bring upright
				shooter.rotate(1000, true);
				loaderMotor.rotate(367); //make room for new ball
				shooter.rotate(500);
				shooter.rotate(-500);
				break;
			//}
		}
		
		try {
			Thread.sleep(7000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}
